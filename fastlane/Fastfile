# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

update_fastlane

default_platform(:ios)

platform :ios do

  desc "Generate new screenshots"
  lane :screenshots do
    capture_screenshots
    upload_to_app_store(
      api_key: api_key,
      force: true,
      overwrite_screenshots: true,
      precheck_include_in_app_purchases: false
    )
  end

  desc "[CI] Check static code quality"
  lane :swift_lint do
    swiftlint(
      config_file: ".swiftlint.yml",
      strict: false,
      raise_if_swiftlint_error: true
    )
  end

  desc "[CI] Run Unit and UI Tests"
  lane :test do
    # Run Unit Tests
    scan(
      clean: true,
      scheme: "Artemis"
    )
  end

  desc "[CI] Default build configuration"
  lane :build do
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    keychain_name = "signing"
    keychain_password = "temp"

    ##########################################
    # Environment Setup
    ##########################################   

    info_plist_path = "Artemis/Supporting/Info.plist"

    set_info_plist_value(
      path: info_plist_path,
      key: "CFBundleVersion",
      value: ENV['BUILD_NUMBER']
    )

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      unlock: true,
      timeout: 3600
    )

    ##########################################
    # Configure Code Signing via Match
    ##########################################

    match(
      type: "appstore",
      api_key: api_key, 
      git_branch: "main", # branch to store and get certificates from
      git_full_name: "Artemis IOS", 
      clone_branch_directly: true, # optional
      git_user_email: "ls1.itg@in.tum.de",
      git_url: "https://gitlab.lrz.de/ase/ipraktikum/match-code-signing",
      git_basic_authorization: ENV['IOS_MATCH_GITLAB_AUTH'], # Base-64 encoded, format gitlab_auth_token_name:gitlab_auth_token
      keychain_name: keychain_name,
      keychain_password: keychain_password, # Keychain password to store cert (using the default login keychain)
      verbose: true # optional but very helpful
    )

    ##########################################
    # Project Setup
    ##########################################

    # Update AppID for publishing
    update_app_identifier(
      plist_path: info_plist_path
    )

    # Update Xcode Project to use maunual code signing
    update_code_signing_settings(
      use_automatic_signing: false,
      code_sign_identity: "iPhone Distribution",
      profile_uuid: lane_context[SharedValues::SIGH_UUID],
      profile_name: lane_context[SharedValues::SIGH_NAME]
    )

    ##########################################
    # Code sign and Build
    ##########################################

    # Build the app
    build_ios_app(
      clean: true, # Do a clean build each time
      output_name: "App.ipa", # The name of the output artifact
      export_method: "app-store", # Export for app-store signing
      configuration: "Release", # Build with release configuration
      cloned_source_packages_path: ".SwiftPackages", # Custom path for cloning source packages to
      derived_data_path: ".DerivedData", # Custom derived data path
      output_directory: "./build", # Directory where the output artifacts are generated
      scheme: "Artemis",
      xcargs: "-skipMacroValidation -skipPackagePluginValidation"
    )
  end

  desc "[CI] Upload a previous build app to TestFlight"
  lane :release do

    upload_to_testflight(
      ipa: "#{Dir.pwd}/../build/App.ipa",
      demo_account_required: true,
      api_key: api_key,
      # submit_beta_review: false,
      skip_waiting_for_build_processing: true
    )
  end

  desc "[CI] Generate a fresh token to authenticate on the app store connect api"
  lane :api_key do
    app_store_connect_api_key(
      duration: 300, # This Token is valid for 300s
      key_id: ENV["IOS_APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["IOS_APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["IOS_APP_STORE_CONNECT_API_KEY_PASSWORD"],
      is_key_content_base64: true
    )
  end

end
