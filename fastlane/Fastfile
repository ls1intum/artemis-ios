# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  desc "Generate new screenshots"
  lane :screenshots do
    capture_screenshots
    upload_to_app_store(
      api_key: api_key,
      force: true,
      overwrite_screenshots: true,
      precheck_include_in_app_purchases: false
    )
  end

  desc "[CI] Check static code quality"
  lane :swift_lint do
    swiftlint(
      config_file: ".swiftlint.yml",
      strict: false,
      raise_if_swiftlint_error: true
    )
  end

  desc "[CI] Run Unit and UI Tests"
  lane :test do
    # Run Unit Tests
    scan(
      clean: true,
      scheme: "Artemis",
      xcargs: "-skipMacroValidation -skipPackagePluginValidation",
    )
  end

  desc "[CI] Build Artemis Scheme"
  lane :build do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    notification_extension_identifier = app_identifier + ".ArtemisNotificationExtension"
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    setup_ci(force: 'true')
    match(
      app_identifier: [app_identifier, notification_extension_identifier],
      type: 'appstore',
      git_url: ENV['MATCH_GIT_URL'],
      git_basic_authorization: ENV['MATCH_GITLAB_AUTH'],
      api_key: api_key,
      git_full_name: 'Artemis IOS',
      git_user_email: 'ls1.itg@in.tum.de',
      readonly: false
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      code_sign_identity: "iPhone Distribution",
      sdk: "iphoneos*",
      profile_name: "match AppStore de.tum.cit.ase.artemis",
      bundle_identifier: app_identifier,
      team_id: team_id
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      code_sign_identity: "iPhone Distribution",
      sdk: "iphoneos*",
      profile_name: "match AppStore de.tum.cit.ase.artemis.ArtemisNotificationExtension",
      bundle_identifier: notification_extension_identifier,
      team_id: team_id,
      targets: ["ArtemisNotificationExtension"]
    )
    increment_build_number(
      build_number: ENV['BUILD_NUMBER'],
      xcodeproj: "Artemis.xcodeproj"
    )
    build_app(
      scheme: "Artemis",
      clean: true,
      output_name: "App.ipa",
      configuration: "Release",
      cloned_source_packages_path: ".SwiftPackages",
      derived_data_path: ".DerivedData",
      output_directory: "./build",
      xcargs: "-skipMacroValidation -skipPackagePluginValidation",
      export_options: {
        provisioningProfiles: {
          "de.tum.cit.ase.artemis" => "match AppStore de.tum.cit.ase.artemis",
          "de.tum.cit.ase.artemis.ArtemisNotificationExtension" => "match AppStore de.tum.cit.ase.artemis.ArtemisNotificationExtension"
        }
      }
    )
  end

  desc "[CI] Upload the newest build to TestFlight"
  lane :release do
    upload_to_testflight(
      ipa: "#{Dir.pwd}/../build/App.ipa",
      demo_account_required: true,
      api_key: api_key,
      # submit_beta_review: false,
      skip_waiting_for_build_processing: true
    )
  end

  lane :api_key do
    app_store_connect_api_key(
      duration: 300, # This Token is valid for 300s
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['API_KEY_ISSUER_ID'],
      key_content: ENV['API_KEY_PASSWORD'],
      is_key_content_base64: true
    )
  end

end
